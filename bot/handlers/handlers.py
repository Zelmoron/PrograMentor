from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import State, StatesGroup
from aiogram.types import Message
from keyboards.keyboards import get_main_keyboard
from db.db_connect import setup_database_connection
from utils.logging import logger
from utils.validation import validate_nickname
from datetime import datetime
import hashlib

router = Router()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
connection, cursor = setup_database_connection()

class RegistrationForm(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    nickname = State()
    password = State()
    change_password = State()

@router.message(F.text.startswith('/start'))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        'üëã Welcome! This is the PrograMentor project bot. Use the buttons below to proceed.',
        reply_markup=get_main_keyboard()
    )

@router.message(F.text == 'üìù Register')
async def register_callback(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        tg_user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        cursor.execute("SELECT COUNT(*) FROM users WHERE id = %s", (tg_user_id,))
        count = cursor.fetchone()[0]

        if count != 0:
            await message.answer('‚ö†Ô∏è You are already registered.')
        else:
            await message.answer(
                'üìù Please enter your nickname (8-15 characters).\n'
                'Use only Latin letters (a-z, A-Z), underscores (_), and digits (0-9).\n'
                'Example: <code>user_123</code>.',
                parse_mode="HTML"
            )
            await state.set_state(RegistrationForm.nickname)

    except Exception as e:
        logger.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}')

@router.message(RegistrationForm.nickname)
async def handle_nickname(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∏–∫–Ω–µ–π–º–∞"""
    nickname = message.text

    if validate_nickname(nickname):
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –Ω–∏–∫–Ω–µ–π–º
            cursor.execute("SELECT COUNT(*) FROM users WHERE username = %s", (nickname,))
            count = cursor.fetchone()[0]

            if count != 0:
                await message.reply('‚ö†Ô∏è A user with this nickname is already registered.')
                await state.set_state(RegistrationForm.nickname)
            else:
                await message.reply('‚úÖ Nickname accepted.')
                await state.update_data(nickname=nickname)
                await message.answer('üîë Please enter your password:')
                await state.set_state(RegistrationForm.password)
        except Exception as e:
            logger.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')
    else:
        await message.reply('‚ùå Invalid nickname. Please try again.')
        await state.set_state(RegistrationForm.nickname)

@router.message(RegistrationForm.password)
async def handle_password(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è"""
    try:
        data = await state.get_data()
        nickname = data['nickname']
        password = message.text

        # –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        hashed_password = hashlib.sha256(password.encode()).hexdigest()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
        cursor.execute(
            "INSERT INTO users (id, username, password, created_at) VALUES (%s, %s, %s, %s)",
            (message.from_user.id, nickname, hashed_password, datetime.now())
        )
        connection.commit()

        await message.reply(
            'üéâ Registration complete! Your password has been saved.',
            reply_markup=get_main_keyboard()
        )
        await state.clear()
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}')

@router.message(F.text == 'üîí Change Password')
async def change_password_callback(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor.execute("SELECT COUNT(*) FROM users WHERE id = %s", (message.from_user.id,))
        count = cursor.fetchone()[0]

        if count != 0:
            await message.answer('üîí Please enter your new password:')
            await state.set_state(RegistrationForm.change_password)
        else:
            await message.answer('‚ö†Ô∏è You are not registered.', reply_markup=get_main_keyboard())
    except Exception as e:
        logger.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')

@router.message(RegistrationForm.change_password)
async def handle_change_password(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è"""
    try:
        new_password = message.text

        # –•–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
        hashed_password = hashlib.sha256(new_password.encode()).hexdigest()

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –≤ –±–∞–∑–µ
        cursor.execute(
            "UPDATE users SET password = %s, updated_at = %s WHERE id = %s",
            (hashed_password, datetime.now(), message.from_user.id)
        )
        connection.commit()

        await message.answer(
            '‚úÖ Your password has been changed.',
            reply_markup=get_main_keyboard()
        )
        await state.clear()
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è: {e}')