from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import State, StatesGroup
from aiogram.types import Message
from keyboards.keyboards import get_main_keyboard
from db.db_connect import setup_database_connection
from utils.logging import logger
from utils.validation import validate_nickname
from datetime import datetime
import hashlib


router = Router()

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
connection, cursor = setup_database_connection()


class RegistrationForm(StatesGroup):
    """–§–æ—Ä–º–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    nickname = State()
    password = State()
    change_password = State()


@router.message(F.text.startswith('/start'))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ –±–æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ PrograMentor. –î–ª—è –¥–µ–π—Å—Ç–≤–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.',
        reply_markup=get_main_keyboard()
    )


@router.message(F.text == 'üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')
async def register_callback(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        tg_user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT COUNT(*) FROM users WHERE id = %s", (tg_user_id,))
        count = cursor.fetchone()[0]

        if count != 0:
            await message.answer('‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.')
        else:
            await message.answer(
                'üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º (8-15 —Å–∏–º–≤–æ–ª–æ–≤).\n'
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã (a-z, A-Z), '
                '–Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ (_) –∏ —Ü–∏—Ñ—Ä—ã (0-9).\n'
                '–ü—Ä–∏–º–µ—Ä: <code>user_123</code>.',
                parse_mode="HTML"
            )
            await state.set_state(RegistrationForm.nickname)

    except Exception as e:
        logger.error(f'–ü—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')


@router.message(RegistrationForm.nickname)
async def handle_nickname(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∏–∫–Ω–µ–π–º–∞"""
    nickname = message.text

    if validate_nickname(nickname):
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–∏–∫–Ω–µ–π–º–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            cursor.execute("SELECT COUNT(*) FROM users WHERE username = %s", (nickname,))
            count = cursor.fetchone()[0]

            if count != 0:
                await message.reply('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∏–∫–Ω–µ–π–º–æ–º —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.')
                await state.set_state(RegistrationForm.nickname)
            else:
                await message.reply('‚úÖ –ù–∏–∫–Ω–µ–π–º –ø—Ä–∏–Ω—è—Ç.')
                await state.update_data(nickname=message.text)
                await message.answer('üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:')
                await state.set_state(RegistrationForm.password)
        except Exception as e:
            logger.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')
    else:
        await message.reply('‚ùå –ù–∏–∫–Ω–µ–π–º –Ω–µ –≤–∞–ª–∏–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        await state.set_state(RegistrationForm.nickname)


@router.message(RegistrationForm.password)
async def handle_password(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è"""
    try:
        data = await state.get_data()
        nickname = data['nickname']
        password = message.text

        # –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
        hashed_password = hashlib.sha256(password.encode()).hexdigest()

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("INSERT INTO users (id, username, password, created_at) VALUES (%s, %s, %s, %s)", 
                       (message.from_user.id, nickname, hashed_password, datetime.now()))
        connection.commit()

        await message.reply(
            f'üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞—à –ø–∞—Ä–æ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω.',
            reply_markup=get_main_keyboard()
        )
        await state.clear()
    except Exception as e:
        logger.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}')


@router.message(F.text == 'üîí –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å')
async def change_password_callback(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT COUNT(*) FROM users WHERE id = %s", (message.from_user.id,))
        count = cursor.fetchone()[0]

        if count != 0:
            await message.answer('üîí –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:')
            await state.set_state(RegistrationForm.change_password)
        else:
            await message.answer('‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.', reply_markup=get_main_keyboard())
    except Exception as e:
        logger.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')


@router.message(RegistrationForm.change_password)
async def handle_change_password(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è"""
    try:
        new_password = message.text

        # –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
        hashed_password = hashlib.sha256(new_password.encode()).hexdigest()

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("UPDATE users SET password = %s, updated_at = %s WHERE id = %s", (hashed_password, datetime.now(), message.from_user.id))
        connection.commit()
        await message.answer(
            f'‚úÖ –í–∞—à –ø–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω—ë–Ω.',
            reply_markup=get_main_keyboard()
        )
        await state.clear()
    except Exception as e:
        logger.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è: {e}')
