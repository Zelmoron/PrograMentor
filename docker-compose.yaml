
services:
  db:
    image: postgres:13
    container_name: postgres_db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydatabase
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - mynetwork
    deploy:
      resources:
        limits:
          cpus: '0.3'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydatabase"]
      interval: 5s
      timeout: 5s
      retries: 5

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: go_app
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - mynetwork
    environment:
      APP_VERSION: V0.0
      DB_CONNECTION: "host=db port=5432 user=user dbname=mydatabase password=password sslmode=disable"
      JWT_SECRET: SECRET
      REFRESH_SECRET: RSECRET
      HOST_CODE_PATH: ${HOST_CODE_PATH:-./codes}
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./codes:/codes

  bot:
    build:
      context: .
      dockerfile: bot/Dockerfile
    container_name: telegram_bot
    depends_on:
      db:
        condition: service_healthy
    networks:
      - mynetwork
    environment:
      DB_CONNECTION: "host=db port=5432 user=user dbname=mydatabase password=password sslmode=disable"
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  mynetwork:
    driver: bridge